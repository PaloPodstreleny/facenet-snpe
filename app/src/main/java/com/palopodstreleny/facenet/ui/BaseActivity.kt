package com.palopodstreleny.facenet.ui

import android.os.Bundle
import android.view.Menu
import android.view.MenuItem
import android.view.View
import androidx.appcompat.app.AppCompatActivity
import androidx.databinding.ViewDataBinding
import com.google.android.material.snackbar.Snackbar
import com.palopodstreleny.facenet.R
import com.palopodstreleny.facenet.dialog.RuntimeDialog
import com.qualcomm.qti.snpe.NeuralNetwork
import com.qualcomm.qti.snpe.NeuralNetwork.Runtime.*
import com.qualcomm.qti.snpe.SNPE

/**
 *
 * Abstract class for FaceRecognition activities that provides common methods and menu creation
 *
 * @param: BINDING: ViewDataBinding represent class that is automatically generated by data binding library
 *
 * @author palo.podstreleny@gmail.com
 *
 */

abstract class BaseActivity<BINDING : ViewDataBinding> : AppCompatActivity(){

    protected lateinit var binding: BINDING

    //Tracking of available menu items creation
    private var isCPUItemCreated = true
    private var isGPUItemCreated = true
    private var isGPU16ItemCreated = true
    private var isDSPItemCreated = true
    private var isAIPItemCreated = true

    //ID's for menu items
    private val menuCPUID = 13
    private val menuGPUID = 14
    private val menuGPU16ID = 15
    private val menuDSPID = 16
    private val menuAIPID = 17

    //HashMap of runtimes and their availability
    private lateinit var availableRuntimes: HashMap<String,Boolean>


    /**
     * Abstract method that provides ViewDataBinding instance
     */
    abstract fun setUpBinding(): BINDING

    /**
     * Abstract method that is called every time runtime is changed in the menu
     */
    abstract fun changeRuntime(runtime: NeuralNetwork.Runtime)

    /**
     * Abstract method that returns View that should represent app toolbar
     */
    abstract fun setToolbarView(): View

    /**
     * Abstract method that use returned String value for setting up toolbar title
     */
    abstract fun setTitleOfToolbar(): String


    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = setUpBinding()
        setToolbar()
        setTitleOfToolbar()
        availableRuntimes = initializeAvailableRuntimes()
    }

    override fun onCreateOptionsMenu(menu: Menu?): Boolean {
        menuInflater.inflate(R.menu.info_menu, menu)
        return true
    }

    override fun onPrepareOptionsMenu(menu: Menu): Boolean {
        val groupId = 0
        //Check if menu item were added, if not add menu items that represents available options of running SNPE
        if (isCPUItemCreated && availableRuntimes[CPU.name]!!) {
            menu.add(groupId, menuCPUID, Menu.NONE, R.string.cpu)
            isCPUItemCreated = false
        }

        if (isGPUItemCreated && availableRuntimes[GPU.name]!!) {
            menu.add(groupId, menuGPUID, Menu.NONE, R.string.gpu)
            isGPUItemCreated = false
        }

        if (isGPU16ItemCreated && availableRuntimes[GPU_FLOAT16.name]!!) {
            menu.add(groupId, menuGPU16ID, Menu.NONE, R.string.gpu_16)
            isGPU16ItemCreated = false
        }

        if (isDSPItemCreated && availableRuntimes[DSP.name]!!) {
            menu.add(groupId, menuDSPID, Menu.NONE, R.string.dsp)
            isDSPItemCreated = false
        }

        if (isAIPItemCreated && availableRuntimes[AIP.name]!!) {
            menu.add(groupId, menuAIPID, Menu.NONE, R.string.aip)
            isAIPItemCreated = false
        }

        return super.onPrepareOptionsMenu(menu)
    }

    override fun onOptionsItemSelected(item: MenuItem?): Boolean {
        if (item == null) return super.onOptionsItemSelected(item)

        //When info button is selected show information about all runtimes
        //If Other button is selected call changerRuntime method
        return when (item.itemId) {
            R.id.info -> {
                openDialog()
                true
            }

            menuCPUID -> {
                changeRuntime(CPU)
                true
            }

            menuGPUID -> {
                changeRuntime(GPU)
                true
            }

            menuGPU16ID -> {
                changeRuntime(GPU_FLOAT16)
                true
            }

            menuDSPID -> {
                changeRuntime(DSP)
                true
            }

            menuAIPID -> {
                changeRuntime(AIP)
                true
            }

            else -> super.onOptionsItemSelected(item)

        }
    }

    /**
     * Helper method for setting up Toolbar and Toolbar's title
     */
    private fun setToolbar() {
        //Set toolbar as actionbar
        setSupportActionBar(setToolbarView() as androidx.appcompat.widget.Toolbar)

        //Set toolbar title
        supportActionBar?.title = setTitleOfToolbar()
    }

    /**
     * Helper method for opening RuntimeDialog
     */
    private fun openDialog() {
        val dialog = RuntimeDialog()

        //Put runtime information to Bundle and pass it as arguments to Dialog
        val bundleData = Bundle()
        bundleData.putBoolean(CPU.name, availableRuntimes[CPU.name]!!)
        bundleData.putBoolean(GPU.name, availableRuntimes[GPU.name]!!)
        bundleData.putBoolean(GPU_FLOAT16.name, availableRuntimes[GPU_FLOAT16.name]!!)
        bundleData.putBoolean(DSP.name, availableRuntimes[DSP.name]!!)
        bundleData.putBoolean(AIP.name, availableRuntimes[AIP.name]!!)

        dialog.arguments = bundleData
        dialog.show(supportFragmentManager, "dialog_id")
    }

    /**
     * Helper method for initializing available runtimes for SNPE network
     */
    private fun initializeAvailableRuntimes(): HashMap<String, Boolean> {

        val builder = SNPE.NeuralNetworkBuilder(application)
        val data = HashMap<String, Boolean>()

        data[CPU.name] = builder.isRuntimeSupported(CPU)
        data[GPU.name] = builder.isRuntimeSupported(GPU)
        data[GPU_FLOAT16.name] = builder.isRuntimeSupported(GPU_FLOAT16)
        data[DSP.name] = builder.isRuntimeSupported(DSP)
        data[AIP.name] = builder.isRuntimeSupported(AIP)

        return data
    }

    /**
     * Helper method for showing message in the bottom of page
     */
    protected fun showSnackBar(message: String){
        Snackbar.make(binding.root,message,Snackbar.LENGTH_LONG).show()
    }


}